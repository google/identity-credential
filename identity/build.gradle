plugins {
    id("com.android.library")
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 24

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    namespace "com.android.identity"
}

dependencies {
    implementation("androidx.annotation:annotation:$androidx_annotation_version")
    implementation "androidx.biometric:biometric:$androidx_biometrics"
    implementation "co.nstant.in:cbor:$cbor_version"
    implementation "org.bouncycastle:bcprov-jdk15on:$bouncy_castle_bcprov_version"
    implementation("org.bouncycastle:bcpkix-jdk15on:$bouncy_castle_bcpkix_version")

    // JUnit 4 framework
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_test"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
}

task generateApiDoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += files(ext.androidJar)

    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");

    destinationDir = file("../docs/javadoc/")
    failOnError false
}

afterEvaluate {
    generateApiDoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}