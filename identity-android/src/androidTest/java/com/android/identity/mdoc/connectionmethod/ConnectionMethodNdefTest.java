/*
 * Copyright 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.identity.mdoc.connectionmethod;

import android.nfc.FormatException;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.util.Pair;

import androidx.test.filters.SmallTest;

import com.android.identity.android.mdoc.transport.DataTransportBle;
import com.android.identity.android.util.NfcUtil;
import com.android.identity.internal.Util;

import org.junit.Assert;
import org.junit.Test;

import java.util.Collections;
import java.util.UUID;

// This is quite similar to ConnectionMethodTest but tests all the NDEF results
//
// TODO: port all the NDEF routines to not use any Android specific stuff so we can
//  include it in the non-Android specific library and combine this test with
//  ConnectionMethod
//
public class ConnectionMethodNdefTest {
    @Test
    @SmallTest
    public void testConnectionMethodNfc() {
        ConnectionMethodNfc cm = new ConnectionMethodNfc(4096, 32768);
        ConnectionMethodNfc decoded = (ConnectionMethodNfc) ConnectionMethod.fromDeviceEngagement(cm.toDeviceEngagement());
        Assert.assertNotNull(decoded);
        Assert.assertEquals(decoded.getCommandDataFieldMaxLength(), decoded.getCommandDataFieldMaxLength());
        Assert.assertEquals(decoded.getResponseDataFieldMaxLength(), decoded.getResponseDataFieldMaxLength());
        Assert.assertEquals("[\n" +
                "  1,\n" +
                "  1,\n" +
                "  {\n" +
                "    0 : 4096,\n" +
                "    1 : 32768\n" +
                "  }\n" +
                "]", Util.cborPrettyPrint(cm.toDeviceEngagement()));
    }

    @Test
    @SmallTest
    public void testConnectionMethodBle() {
        UUID uuidPeripheral = new UUID(0, 1);
        UUID uuidCentral = new UUID(123456789, 987654321);
        ConnectionMethodBle cm = new ConnectionMethodBle(
                true,
                true,
                uuidPeripheral,
                uuidCentral);
        ConnectionMethodBle decoded = (ConnectionMethodBle) ConnectionMethod.fromDeviceEngagement(cm.toDeviceEngagement());
        Assert.assertNotNull(decoded);
        Assert.assertTrue(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertEquals(uuidPeripheral, decoded.getPeripheralServerModeUuid());
        Assert.assertEquals(uuidCentral, decoded.getCentralClientModeUuid());
        Assert.assertEquals("[\n" +
                "  2,\n" +
                "  1,\n" +
                "  {\n" +
                "    0 : true,\n" +
                "    1 : true,\n" +
                "    10 : [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],\n" +
                "    11 : [0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xde, 0x68, 0xb1]\n" +
                "  }\n" +
                "]", Util.cborPrettyPrint(cm.toDeviceEngagement()));

        // For use in NFC, the UUIDs have to be the same
        UUID uuidBoth = new UUID(0, 2);
        cm = new ConnectionMethodBle(
                true,
                true,
                uuidBoth,
                uuidBoth);

        // The Carrier Reference should be the same whether it's generated by the mdoc (for Handover
        // Select) or the mdoc reader (for Handover Request).
        Pair<NdefRecord, byte[]> pair = NfcUtil.toNdefRecord(cm, Collections.singletonList("mdoc"), true);
        decoded = DataTransportBle.fromNdefRecord(pair.first, true);
        Assert.assertNotNull(decoded);
        Assert.assertTrue(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertEquals(uuidBoth, decoded.getPeripheralServerModeUuid());
        Assert.assertEquals(uuidBoth, decoded.getCentralClientModeUuid());
        Assert.assertEquals("da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c03110702000000000000000000000000000000",
                Util.toHex(pair.first.toByteArray()));
        Assert.assertEquals("01013001046d646f63", Util.toHex(pair.second));

        Pair<NdefRecord, byte[]> hrPair = NfcUtil.toNdefRecord(cm, Collections.singletonList(""), false);
        Assert.assertArrayEquals(pair.first.toByteArray(), hrPair.first.toByteArray());
    }

    @Test
    @SmallTest
    public void testConnectionMethodBleOnlyCentralClient() {
        UUID uuid = new UUID(123456789, 987654321);
        ConnectionMethodBle cm = new ConnectionMethodBle(
                false,
                true,
                null,
                uuid);
        ConnectionMethodBle decoded = (ConnectionMethodBle) ConnectionMethod.fromDeviceEngagement(cm.toDeviceEngagement());
        Assert.assertNotNull(decoded);
        Assert.assertFalse(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertNull(decoded.getPeripheralServerModeUuid());
        Assert.assertEquals(uuid, decoded.getCentralClientModeUuid());
        Assert.assertEquals("[\n" +
                "  2,\n" +
                "  1,\n" +
                "  {\n" +
                "    0 : false,\n" +
                "    1 : true,\n" +
                "    11 : [0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xde, 0x68, 0xb1]\n" +
                "  }\n" +
                "]", Util.cborPrettyPrint(cm.toDeviceEngagement()));

        // The Carrier Reference depends on whether it's generated by the mdoc (for Handover Select)
        // or the mdoc reader (for Handover Request). The only difference is how the "LE Role" is
        // set...
        //   - for HS / mdoc LE role will be set to 0x01 (Only Central Role supported).
        //   - for HR / mdoc reader LE role will be set to 0x00 (Only Peripheral Role supported).

        Pair<NdefRecord, byte[]> pair = NfcUtil.toNdefRecord(cm, Collections.singletonList("mdoc"), true);
        decoded = DataTransportBle.fromNdefRecord(pair.first, true);
        Assert.assertNotNull(decoded);
        Assert.assertFalse(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertNull(decoded.getPeripheralServerModeUuid());
        Assert.assertEquals(uuid, decoded.getCentralClientModeUuid());
        Assert.assertEquals("da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c011107b168de3a0000000015cd5b0700000000",
                Util.toHex(pair.first.toByteArray()));
        Assert.assertEquals("01013001046d646f63", Util.toHex(pair.second));

        pair = NfcUtil.toNdefRecord(cm, Collections.emptyList(), false);
        decoded = DataTransportBle.fromNdefRecord(pair.first, false);
        Assert.assertNotNull(decoded);
        Assert.assertFalse(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertNull(decoded.getPeripheralServerModeUuid());
        Assert.assertEquals(uuid, decoded.getCentralClientModeUuid());
        Assert.assertEquals("da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c001107b168de3a0000000015cd5b0700000000",
                Util.toHex(pair.first.toByteArray()));
        Assert.assertEquals("01013000", Util.toHex(pair.second));
    }

    @Test
    @SmallTest
    public void testConnectionMethodBleOnlyPeripheralServer() {
        UUID uuid = new UUID(0, 1);
        ConnectionMethodBle cm = new ConnectionMethodBle(
                true,
                false,
                uuid,
                null);
        ConnectionMethodBle decoded = (ConnectionMethodBle) ConnectionMethod.fromDeviceEngagement(cm.toDeviceEngagement());
        Assert.assertNotNull(decoded);
        Assert.assertTrue(decoded.getSupportsPeripheralServerMode());
        Assert.assertFalse(decoded.getSupportsCentralClientMode());
        Assert.assertEquals(uuid, decoded.getPeripheralServerModeUuid());
        Assert.assertNull(decoded.getCentralClientModeUuid());
        Assert.assertEquals("[\n" +
                "  2,\n" +
                "  1,\n" +
                "  {\n" +
                "    0 : true,\n" +
                "    1 : false,\n" +
                "    10 : [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]\n" +
                "  }\n" +
                "]", Util.cborPrettyPrint(cm.toDeviceEngagement()));

        // The Carrier Reference depends on whether it's generated by the mdoc (for Handover Select)
        // or the mdoc reader (for Handover Request). The only difference is how the "LE Role" is
        // set...
        //   - for HS / mdoc LE role will be set to 0x00 (Only Peripheral Role supported).
        //   - for HR / mdoc reader LE role will be set to 0x01 (Only Central Role supported).

        Pair<NdefRecord, byte[]> pair = NfcUtil.toNdefRecord(cm, Collections.singletonList("mdoc"), true);
        decoded = DataTransportBle.fromNdefRecord(pair.first, true);
        Assert.assertNotNull(decoded);
        Assert.assertTrue(decoded.getSupportsPeripheralServerMode());
        Assert.assertFalse(decoded.getSupportsCentralClientMode());
        Assert.assertEquals(uuid, decoded.getPeripheralServerModeUuid());
        Assert.assertNull(decoded.getCentralClientModeUuid());
        Assert.assertEquals("da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c00110701000000000000000000000000000000",
                Util.toHex(pair.first.toByteArray()));
        Assert.assertEquals("01013001046d646f63", Util.toHex(pair.second));

        pair = NfcUtil.toNdefRecord(cm, Collections.emptyList(), false);
        decoded = DataTransportBle.fromNdefRecord(pair.first, false);
        Assert.assertNotNull(decoded);
        Assert.assertTrue(decoded.getSupportsPeripheralServerMode());
        Assert.assertFalse(decoded.getSupportsCentralClientMode());
        Assert.assertEquals(uuid, decoded.getPeripheralServerModeUuid());
        Assert.assertNull(decoded.getCentralClientModeUuid());
        Assert.assertEquals("da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c01110701000000000000000000000000000000",
                Util.toHex(pair.first.toByteArray()));
        Assert.assertEquals("01013000", Util.toHex(pair.second));
    }

    @Test
    @SmallTest
    public void testConnectionMethodBleNoUuid() {
        // (Annoyingly) it's permissible to omit the UUID, for example if doing NFC negotiated
        // handover and replying to a Handover Request message. In that case the UUID is the one
        // the requester specified in Handover Request and there's no need to repeat it in Handover
        // Select.
        //
        ConnectionMethodBle cm = new ConnectionMethodBle(
                false,
                true,
                null,
                null);
        Pair<NdefRecord, byte[]> pair = NfcUtil.toNdefRecord(cm, Collections.singletonList("mdoc"), true);
        ConnectionMethodBle decoded = DataTransportBle.fromNdefRecord(pair.first, true);
        Assert.assertNotNull(decoded);
        Assert.assertFalse(decoded.getSupportsPeripheralServerMode());
        Assert.assertTrue(decoded.getSupportsCentralClientMode());
        Assert.assertNull(decoded.getPeripheralServerModeUuid());
        Assert.assertNull(decoded.getCentralClientModeUuid());
    }

    // This is a test against a vector for an mdoc which sends a Handover Select message
    // with BLE mdoc central client mode and no UUID. Check that we can parse it.
    @Test
    @SmallTest
    public void testConnectionMethodVector() throws FormatException {
        NdefMessage ndefHsMessage = new NdefMessage(Util.fromHex("91020f487315d10209616301013001046d646f631a2003016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c015c1e580469736f2e6f72673a31383031333a646576696365656e676167656d656e746d646f63a20063312e30018201d818584ba401022001215820e778fcb1513fad715c755462cb4d3ee3c1de2f618d10e07788a35eda2da58b982258205e6ee59512414cdb11ee330db2590ab6d1b5a78ede4a0ecac02e3af65cafbcd9"));
        Assert.assertNotNull(ndefHsMessage);

        ConnectionMethodBle cm = null;
        for (NdefRecord r : ndefHsMessage.getRecords()) {
            if (r.getTnf() == NdefRecord.TNF_MIME_MEDIA) {
                cm = DataTransportBle.fromNdefRecord(r, true);
            }
        }
        Assert.assertNotNull(cm);
        Assert.assertFalse(cm.getSupportsPeripheralServerMode());
        Assert.assertTrue(cm.getSupportsCentralClientMode());
        Assert.assertNull(cm.getPeripheralServerModeUuid());
        Assert.assertNull(cm.getCentralClientModeUuid());
    }
}
